{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\"\nimport readingTime from 'reading-time';\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport remarkGfm from 'remark-gfm';\nimport rehypeCodeTitles from 'rehype-code-titles';\nimport rehypePrism from 'rehype-prism-plus';\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n    slug: {\n        type: \"string\",\n        resolve: (doc: any) => `/${doc.slug}`,\n    },\n    slugAsParams: {\n        type: \"string\",\n        resolve: (doc: any) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n    },\n    readingTime: { type: 'json', resolve: (doc: any) => readingTime(doc.body.raw) },\n} as const;\n\nexport const Page = defineDocumentType(() => ({\n    name: \"Page\",\n    filePathPattern: `pages/**/*.mdx`,\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            required: true,\n        },\n        description: {\n            type: \"string\",\n        },\n    },\n    computedFields,\n}))\n\nexport const Post = defineDocumentType(() => ({\n    name: \"Post\",\n    filePathPattern: `posts/**/*.mdx`,\n    contentType: \"mdx\",\n    fields: {\n        author: {\n            type: \"string\",\n            required: true\n        },\n        id: {\n            type: \"string\",\n            required: true,\n        },\n        title: {\n            type: \"string\",\n            required: true,\n        },\n        description: {\n            type: \"string\",\n        },\n        short_description: {\n            type: \"string\",\n        },\n        publishedAt: {\n            type: 'string',\n            required: true\n        },\n        slug: {\n            type: 'string',\n            required: true\n        },\n        category: {\n            type: 'string',\n            required: true\n        },\n        imageURL: {\n            type: 'string',\n            required: false\n        },\n    },\n    computedFields\n}))\n\nexport default makeSource({\n    contentDirPath: \"./content\",\n    documentTypes: [Post, Page],\n    mdx: {\n        remarkPlugins: [remarkGfm],\n        rehypePlugins: [\n            rehypeSlug,\n            rehypeCodeTitles,\n            rehypePrism as any,\n            [\n                rehypeAutolinkHeadings,\n                {\n                    properties: {\n                        className: ['anchor'],\n                    },\n                },\n            ],\n        ],\n    },\n})"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,iBAAiB;AACxB,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,OAAO,eAAe;AACtB,OAAO,sBAAsB;AAC7B,OAAO,iBAAiB;AAGxB,IAAM,iBAAiB;AAAA,EACnB,MAAM;AAAA,IACF,MAAM;AAAA,IACN,SAAS,CAAC,QAAa,IAAI,IAAI,IAAI;AAAA,EACvC;AAAA,EACA,cAAc;AAAA,IACV,MAAM;AAAA,IACN,SAAS,CAAC,QAAa,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EAC9E;AAAA,EACA,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAa,YAAY,IAAI,KAAK,GAAG,EAAE;AAClF;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA;AACJ,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,IAAI;AAAA,MACA,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,IACV;AAAA,IACA,mBAAmB;AAAA,MACf,MAAM;AAAA,IACV;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA;AACJ,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,IAAI;AAAA,EAC1B,KAAK;AAAA,IACD,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,UACI,YAAY;AAAA,YACR,WAAW,CAAC,QAAQ;AAAA,UACxB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;",
  "names": []
}
