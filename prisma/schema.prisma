// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id                      String                    @id @default(uuid())
  email                   String                    @unique
  name                    String
  password                String?
  verifyToken             String                    @default(uuid())
  verified                Boolean
  emailVerified           DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  avatar                  String?
  role                    String                    @default("USER")
  provider                String
  teams                   Team[] // A user can belong to multiple teams
  message                 Message[]
  chat                    Chat[]
  accounts                Account[]
  sessions                Session[]
  memberBenefit           MemberBenefit[]
  MemberBenefitPageConfig MemberBenefitPageConfig[]
  OtherMemberBenefit      OtherMemberBenefit[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Team {
  id            String         @id @default(uuid())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  users         User[] // A team can have multiple users
  subscriptions Subscription[] // A team can have multiple subscriptions
}

model Subscription {
  id                   String    @id @default(uuid())
  stripeSubscriptionId String    @unique
  name                 String
  userId               String
  priceId              String
  status               String
  team                 Team?     @relation(fields: [teamId], references: [id])
  teamId               String?
  startDate            DateTime
  endDate              DateTime
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  payments             Payment[] // A subscription can have multiple payments
}

model Payment {
  id             String       @id @default(uuid())
  amount         Float
  currency       String
  status         String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model EmailVerification {
  id        String   @id @default(uuid())
  email     String
  used      Boolean  @default(false)
  token     String   @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetPassword {
  id        String   @id @default(uuid())
  email     String
  used      Boolean  @default(false)
  token     String   @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WaitlistUser {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String    @id @default(uuid())
  title     String
  userId    String
  messages  Message[]
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  chatId     String
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content    String
  serialized String
  role       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MemberBenefitPageConfig {
  id          String   @id @default(uuid())
  clientSlug  String   @unique
  title       String
  description String
  imageURL    String
  userId      String
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id             String          @id @default(uuid())
  name           String
  memberBenefits MemberBenefit[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model MemberBenefit {
  id                 String               @id @default(uuid())
  title              String
  description        String?
  imageURL           String?
  domain             String
  location           String?
  code               String
  link               String?
  userId             String
  categoryId         String?
  category           Category?            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user               User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  clicks             MemberBenefitClick[] @relation("MemberBenefitToClick")
  OtherMemberBenefit OtherMemberBenefit[]
}

model MemberBenefitClick {
  id              String  @id @default(uuid())
  memberBenefitId String
  device          String?

  browser       String?
  os            String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  memberBenefit MemberBenefit @relation(name: "MemberBenefitToClick", fields: [memberBenefitId], references: [id])
}

model OtherMemberBenefit {
  id              String        @id @default(uuid())
  memberBenefitId String
  userId          String
  memberBenefit   MemberBenefit @relation(fields: [memberBenefitId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
}
